package org.lab.insurance.asset.core.initializer;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import org.lab.insurance.domain.insurance.Asset;
import org.lab.insurance.domain.insurance.AssetType;
import org.lab.insurance.domain.insurance.repository.AssetRepository;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.separator.DefaultRecordSeparatorPolicy;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class AssetInitializer {

	@Autowired
	public AssetInitializer(AssetRepository repository, MongoOperations operations) throws Exception {
		if (repository.count() != 0) {
			return;
		}
		List<Asset> assets = readAssets();
		log.info("Importing {} assets", assets.size());
		repository.save(assets);
		log.info("Imported {} assets.", repository.count());
	}

	public static List<Asset> readAssets() throws Exception {
		ClassPathResource resource = new ClassPathResource("data/assets.csv");
		Scanner scanner = new Scanner(resource.getInputStream());
		String line = scanner.nextLine();
		scanner.close();
		FlatFileItemReader<Asset> itemReader = new FlatFileItemReader<Asset>();
		itemReader.setResource(resource);

		DelimitedLineTokenizer tokenizer = new DelimitedLineTokenizer();
		tokenizer.setNames(line.split(","));
		tokenizer.setStrict(false);

		DefaultLineMapper<Asset> lineMapper = new DefaultLineMapper<Asset>();
		lineMapper.setFieldSetMapper(fields -> {
			Asset asset = new Asset();
			asset.setName(fields.readString("NAME"));
			asset.setIsin(fields.readString("ISIN"));
			asset.setType(AssetType.valueOf(fields.readString("TYPE")));
			return asset;
		});

		lineMapper.setLineTokenizer(tokenizer);
		itemReader.setLineMapper(lineMapper);
		itemReader.setRecordSeparatorPolicy(new DefaultRecordSeparatorPolicy());
		itemReader.setLinesToSkip(1);
		itemReader.open(new ExecutionContext());

		List<Asset> stores = new ArrayList<>();
		Asset store = null;
		do {
			store = itemReader.read();
			if (store != null) {
				stores.add(store);
			}
		}
		while (store != null);
		return stores;
	}
}
